Спецификации требований

Способность к модификации. Необходимо обеспечить возможность переработки требований, если понадобится, и поддерживать историю изменений для каждого положения. Для этого все они должны быть уникально помечены и обозначены, чтобы вы могли ссылаться на них однозначно. Каждое требование должно быть записано в спецификации только единожды. Иначе вы легко получите несогласованность, изменив только одно положение из двух одинаковых. Лучше используйте ссылки на первоначальные утверждения, а не дублируйте положения. Модификация спецификации станет гораздо легче, если вы составите содержание документа и указатель. Сохранение спецификации в базе данных коммерческого инструмента управления требованиями сделает их пригодными для повторного использования.

Трассируемость. Трассируемость, или возможность для анализа, можно реализоват как в направлении назад, к первоисточникам, так и вперед, к элементам дизайна и исходному коду, который его реализует, а также к вариантам использования, которые
позволяют проверить корректность, реализации. Трассируемые требования помечены соответствующими идентификаторами. Они записаны в структурированной, детализированной форме, в противоположность параграфам в длинной повествовательной форме. Избегайте слипания множества требований в один ком, отдельные требования можно трассировать к различным элементам дизайна и кода.

Спецификации требований

Согласованность. Согласованные требования не конфликтуют с другими требованиями такого же типа или с высокоуровневыми пользовательскими, системными или бизнес-требованиями. Несогласованность документов следует устранить до начала процесса разработки. Вы не всегда знаете, какое именно положение некорректно (если какое-то некорректно), пока не выполните исследование. Рекомендуется записывать автора каждого требования, чтобы узнать, кто его высказал, если конфликт все-таки будет


Требования. Requirements

SWEBOK (Software Engineering Body of Knowledge) Программные требования (Software Requirements) – свойства программного обеспечения, которые должны быть надлежащим образом представлены в нем для решения конкретных практических задач.

В IEEE Standard Glossary of Software Engineering Terminology (1990)
Требование – это:

1. условия или возможности, необходимые пользователю для решения проблем или достижения целей;

2. условия или возможности, которыми должна обладать система или системные компоненты, чтобы выполнить контракт или удовлетворять стандартам, спецификациям или другим формальным документам;

3. документированное представление условий или возможностей для пунктов 1 и 2

Требования к продукту и процессу

Процесс

регламентация процесса Заказчиком позволяет снизить его риски;

мероприятия Заказчика по регламентации процесса приводят к
дополнительным накладным расходам.

Продукт

Цель, которую он преследует – получить хороший конечный
продукт: функциональный и удобный в использовании.

требования к продукту являются основополагающим классом
требований.

Группа функциональных требований

Бизнес-требования (Business Requirements) – определяют высокоуровневые цели организации или клиента (потребителя) – заказчика разрабатываемого программного обеспечения.

Пользовательские требования (User Requirements) – описывают цели/задачи пользователей системы, которые должны достигаться/выполняться пользователями при помощи создаваемой программной системы. Эти требования часто представляют в виде вариантов использования (Use Cases).

Функциональные требования (Functional Requirements) – определяют функциональность (поведение) программной системы, которая должна быть создана разработчиками для предоставления возможности выполнения пользователями своих обязанностей в рамках бизнес-требований и в контексте пользовательских требований.

Системные требования (System Requirements) – иногда классифицируются как составная часть группы функциональных требований (не путайте с как таковыми “функциональными требованиями”). Описывают высокоуровневые требования к программному обеспечению, содержащему несколько или много взаимосвязанных подсистем и приложений. При этом, система может быть как целиком
программной, так и состоять из программной и аппаратной частей. В общем случае, частью системы может быть персонал, выполняющий определенные функции системы, например, авторизация выполнения определенных операций с использованием программно-аппаратных подсистем.

Составление требований в стиле Users Story

Шаблон:

As a <type of user>

When <action(s)>

As a result I will get<result>

Acceptance criteria:

<First criteria>

<Second criteria>

…

<Last criteria>

Составление требований в стиле Users Story

Пример:

Одно требование на окошко авторизации

As a user

When I login to <this> website

As a result I will see Home Page

Acceptance criteria:

When I login with correct login and password, I will get access to
Home page

When I login with incorrect login, I will get an error message

When I login with correct login and incorrect password, I will get
an error message

When I login with blank input fields, I will get an error message

There is a link “Forgot password”

SRS (Software Requirements
Specification)

Введение

Цели

Соглашения о терминах

Предполагаемая аудитория и последовательность восприятия

Масштаб проекта

Ссылки на источники

Общее описание

Видение продукта

Функциональность продукта

Классы и характеристики пользователей

Среда функционирования продукта (операционная среда)

Рамки, ограничения, правила и стандарты

Документация для пользователей

Допущения и зависимости

Функциональность системы

Функциональный блок X (таких блоков может быть несколько)

Описание и приоритет

Причинно-следственные связи, алгоритмы (движение процессов, workflows)

Функциональные требования

SRS (Software Requirements
Specification)

Требования к внешним интерфейсам

Интерфейсы пользователя (UX)

Программные интерфейсы

Интерфейсы оборудования

Интерфейсы связи и коммуникации

Нефункциональные требования

Требования к производительности

Требования к сохранности (данных)

Критерии качества программного обеспечения

Требования к безопасности системы

Прочие требования

Приложение А: Глоссарий

Приложение Б: Модели процессов и предметной области и другие диаграммы

Приложение В: Список ключевых задач




Проверка требований. Что для
этого надо?

иметь хорошие доменные знания в области

смотреть на трассировку вверх и вниз (на бизнес-требования и на
низкоуровневые требования — дизайн, макеты, детальное описание
реализации), составлять матрицы трассируемости

форматировать требования в виде таблиц со всеми возможными
вариантами

обращать внимание на общие формулировки

представить себя на месте заказчика/аналитика/простого пользователя и
пытаться предположить, будет ли понятно то или иное требование

руководствоваться здравым смыслом и собственным опытом

Как тестировать требования на:

Корректность/адекватность - нужны знания этой области, смотреть на
трассировку вверх и вниз, ревью – оценка «коллегами» – теми, кто
занимается той же самой работой

Однозначность/недвусмысленность - проверять ветвистость требований,
ревью, избегать ветвлений, обращать внимание на двойственные термины

Полнота набора требований – поиск дыр, проверять на все ли заявленные
модули в SRS прописана функциональность, вся ли функциональность этого
модуля покрыта требованиями

Непротиворечивость или согласованность - выделять все требования,
трассирующиеся на одно верхнеуровневое требование и анализировать такие
наборы или просто делить на категори и анализировать их; обращать
внимание на общие формулировки

Проверяемость (тестопригодность) - Спрашивать себя «как я буду
проверять?», выявлять общие формулировки требующие неопределенного
числа перебора

Прослеживаемость /Трассируемость - иногда есть система для
менеджмента требований, позволяющая автоматически делать трассировку.
Если нет, самим составлять матрицу трассировки (например, в екселе). +
ВСЕГДА самим анализировать трассировку

Понимаемость - стараться представить себя на месте других членов
команды, заказчика, обращать внимание на двойственные термины


Условия проведения тестирования

Необходимые условия:

Наличие объекта тестирования, доступного для проведения испытаний

Наличие исполнителя(ей) (в зависимости от вида проводимых испытаний
им может быть как человек, так и машина или комбинация
человек+машина)

Достаточные условия:

Наличие объекта тестирования, доступного для проведения испытаний

Наличие исполнителя(ей) (в зависимости от вида деятельности на разных
фазах им может быть как человек, так и машина или комбинация
человек+машина)

Наличие плана тестирования

Наличие тест кейсов / тестов

Наличие отчета, подтверждающего выполнение задач и достижение целей,
по тестированию объекта

Test Process – SWEBOK (Software
Engineering Body of Knowledge)

1 Практические соображения (Practical considerations)

1.1 Программирование без персоналий (Attitudes/Egoless programming)

Cовместное стремление участников проекта обеспечить необходимое
качество продукта

1.2 Руководства по тестированию (Test guides)

Работы от управления рисками до специфицированных сценариев
работы программных систем. Обеспечить использование различных
техник для многосторонней оценки

1.3 Управление процессом тестирования (Test process management)

Единый (однозначно интерпретируемый) процесс, на основе учета 4
элементов и связанных с ними факторов: людей, инструментов,
регламентов и количественных оценок (измерений).
1.4 Документирование тестов и рабочего продукта (Test documentation and work
products) IEEE 829-98 “Standard for Software Test Documentation”

1.5 Внутренние и независимые команды тестирования (Internal vs. independent test
team)

1.6 Оценка стоимости и усилий, а также другие измерения процесса (Cost/effort
estimation and other process measures)

1.7 Окончание тестирования (Termination)

покрытие кода тестами; рассмотрение стоимости и рисков, связанных с
потенциальными сбоями; стоимость самого тестирования

1.8 Повторное использование и шаблоны тестов (Test reuse and test patterns)

Общий репозиторий тестовых активов. Шаблоны тестов

2.5 Анализ результатов тестирования (Test results evaluation)

успешность

помехи

review board

5.2.6 Отчёты о проблемах (Problem reporting/Test log)

Журнал тестирования Кто, когда, что, версия.

Problem-reporting system- формирование базы данных, используемой для отладки,
устранения проблем.

Отчёты по тестам - входом для процесса управления изменениями и change
request.

5.2.7 Отслеживание дефектов (Defect tracking)

Анализ: момент и место первого появления данного дефекта в системе, причины
(плохо сформулированные требования, некорректный дизайн, утечки памяти,
поведения операционного и/или тестового окружения и т.д.) и когда они могли бы
быть обнаружены впервые >улучшение процесса тестирования.



